
// Функция для получения номера недели в году
function getWeekNumber1(date) {

    // Определяем первый день недели для нашего календаря (Воскресенье - 0, Понедельник - 1, и так далее)
    const firstDayOfWeek = 1;

    // Определяем первую неделю года
    let firstWeekOfYear = new Date(date.getFullYear(), 0, 1);
    while (firstWeekOfYear.getDay() !== firstDayOfWeek) {
        firstWeekOfYear.setDate(firstWeekOfYear.getDate() - 1);
    }

    // Рассчитываем количество дней между текущей датой и первым днем первой недели года, день = 1000 * 60 * 60 * 24 секунд
    const daysDiff = Math.floor((date - firstWeekOfYear) / 86400000);

    // Определяем номер текущей недели
    const weekNumber = Math.floor(daysDiff / 7) + 1;

    return weekNumber;
}

var today = new Date();
var dd = (today.getDate());
var mm = (today.getMonth() + 1); //January is 0!
var yyyy = today.getFullYear();
var week = getWeekNumber1(today);
console.log(yyyy,mm,dd,week)


// #настройки
const funcs = {
    'Относительный':  addIntervalToDate,  //(date, 'год', -1)
    'Календарный': getStartEndPeriodDate, //(date, 'год', 'начало')
    'Установить': setDatePeriod, //(date, 'год', 2022);
    'Условие': isDateComponentEqual, //(date, 'год','>=', 2022);
};


// настройки фильтров из спика funcs
const spravochnik = {
    //Основной фильтр
    'Основной': 1,

    //**************************************************************************
    // новые фильтры
    'Этот год до конца текущего месяца':
        [e => e.calc('Календарный', 'год', 'начало'),
            e => e.calc('Календарный', 'месяц', 'конец')],

    'Этот год до конца текущей недели':
        [e => e.calc('Календарный', 'год', 'начало'),
            e => e.calc('Календарный', 'неделя', 'конец')],

    'Год до конца полной недели':
        [e => e.check('неделя', '==', 2)&&e.check('день недели', '>', 0) ? e.calc('Относительный', 'неделя', -2).calc('Календарный', 'год', 'начало')//.calc('Календарный', 'неделя', 'начало')
            : e.check('день недели', '==', 0)&&e.check('неделя', '!=', 1) ? e.calc('Календарный', 'год', 'начало')//.calc('Календарный', 'неделя', 'начало')
                : e.calc('Относительный', 'неделя', -1).calc('Календарный', 'год', 'начало'),//.calc('Календарный', 'неделя', 'начало'),
            e => e.check('неделя', '==', 2)&&e.check('день недели', '>', 0) ? e.calc('Относительный', 'неделя', -2).calc('Календарный', 'неделя', 'конец')
                : e.check('день недели', '==', 0)&&e.check('неделя', '!=', 1) ? e.calc('Календарный', 'неделя', 'конец')
                    : e.calc('Относительный', 'неделя', -1).calc('Календарный', 'неделя', 'конец')],

    'Последняя полная неделя':
        [e => e.check('неделя', '==', 2)&&e.check('день недели', '>', 0) ? e.calc('Относительный', 'неделя', -2).calc('Календарный', 'неделя', 'начало')
            : e.check('день недели', '==', 0)&&e.check('неделя', '!=', 1) ? e.calc('Календарный', 'неделя', 'начало')
                : e.calc('Относительный', 'неделя', -1).calc('Календарный', 'неделя', 'начало'),
            e => e.check('неделя', '==', 2)&&e.check('день недели', '>', 0) ? e.calc('Относительный', 'неделя', -2).calc('Календарный', 'неделя', 'конец')
                : e.check('день недели', '==', 0)&&e.check('неделя', '!=', 1) ? e.calc('Календарный', 'неделя', 'конец')
                    : e.calc('Относительный', 'неделя', -1).calc('Календарный', 'неделя', 'конец')],

    'АППН для последняя полная неделя':
        [e => e.check('неделя', '==', 2)&&e.check('день недели', '>', 0) ? e.calc('Относительный', 'неделя', -3).calc('Календарный', 'неделя', 'начало')
            : e.check('день недели', '==', 0)&&e.check('неделя', '!=', 1) ? e.calc('Относительный', 'неделя', -1).calc('Календарный', 'неделя', 'начало')
                : e.calc('Относительный', 'неделя', -2).calc('Календарный', 'неделя', 'начало'),
            e => e.check('неделя', '==', 2)&&e.check('день недели', '>', 0) ? e.calc('Относительный', 'неделя', -3).calc('Календарный', 'неделя', 'конец')
                : e.check('день недели', '==', 0)&&e.check('неделя', '!=', 1) ?
                    e.calc('Относительный', 'неделя', -1).calc('Календарный', 'неделя', 'конец')
                    : e.calc('Относительный', 'неделя', -2).calc('Календарный', 'неделя', 'конец')],

    'АППГ для последняя полная неделя':
        [e => e.check('неделя', '==', 2)&&e.check('день недели', '>', 0) ? e.calc('Относительный', 'неделя', -3-51).calc('Календарный', 'неделя', 'начало')
            : e.check('день недели', '==', 0)&&e.check('неделя', '!=', 1) ? e.calc('Относительный', 'неделя', -1-51).calc('Календарный', 'неделя', 'начало')
                : e.calc('Относительный', 'неделя', -2-51).calc('Календарный', 'неделя', 'начало'),
            e => e.check('неделя', '==', 2)&&e.check('день недели', '>', 0) ? e.calc('Относительный', 'неделя', -3-51).calc('Календарный', 'неделя', 'конец')
                : e.check('день недели', '==', 0)&&e.check('неделя', '!=', 1) ?
                    e.calc('Относительный', 'неделя', -1-51).calc('Календарный', 'неделя', 'конец')
                    : e.calc('Относительный', 'неделя', -2-51).calc('Календарный', 'неделя', 'конец')],

    '2019 для последняя полная неделя':
        [e => e.check('неделя', '==', 2)&&e.check('день недели', '>', 0) ? e.calc('Относительный', 'неделя', -2).calc('Установить', 'год', 2019).calc('Календарный', 'неделя', 'начало')
            : e.check('день недели', '==', 0)&&e.check('неделя', '!=', 1) ? e.calc('Установить', 'год', 2019).calc('Календарный', 'неделя', 'начало')
                : e.calc('Относительный', 'неделя', -1).calc('Установить', 'год', 2019).calc('Календарный', 'неделя', 'начало'),
            e => e.check('неделя', '==', 2)&&e.check('день недели', '>', 0) ? e.calc('Относительный', 'неделя', -2).calc('Установить', 'год', 2019).calc('Календарный', 'неделя', 'конец')
                : e.check('день недели', '==', 0)&&e.check('неделя', '!=', 1) ?
                    e.calc('Установить', 'год', 2019).calc('Календарный', 'неделя', 'конец')
                    : e.calc('Относительный', 'неделя', -1).calc('Установить', 'год', 2019).calc('Календарный', 'неделя', 'конец')],

    'Весь год для последней полной недели':
        [e => e.check('неделя', '==', 2)&&e.check('день недели', '>', 0) ? e.calc('Относительный', 'неделя', -2).calc('Календарный', 'год', 'начало') //.calc('Календарный', 'неделя', 'начало')
            : e.check('день недели', '==', 0)&&e.check('неделя', '!=', 1) ? e.calc('Календарный', 'год', 'начало') //.calc('Календарный', 'неделя', 'начало')
                : e.calc('Относительный', 'неделя', -1).calc('Календарный', 'год', 'начало'), //.calc('Календарный', 'неделя', 'начало'),
            e => e.check('неделя', '==', 2)&&e.check('день недели', '>', 0) ? e.calc('Относительный', 'неделя', -2).calc('Календарный', 'год', 'конец') //.calc('Относительный', 'год', +1).calc('Календарный', 'год', 'начало').calc('Календарный', 'неделя', 'начало').calc('Относительный', 'день', -1)
                : e.check('день недели', '==', 0)&&e.check('неделя', '!=', 1) ? e.calc('Календарный', 'год', 'конец') //.calc('Относительный', 'год', +1).calc('Календарный', 'год', 'начало').calc('Календарный', 'неделя', 'начало').calc('Относительный', 'день', -1)
                    : e.calc('Относительный', 'неделя', -1).calc('Календарный', 'год', 'конец')], //.calc('Относительный', 'год', +1).calc('Календарный', 'год', 'начало').calc('Календарный', 'неделя', 'начало').calc('Относительный', 'день', -1)],

    // проверить 1ю неделю. косячит на 30-31.12
    'Вся последняя неделя с будними днями' :
        [e => e.check('неделя', '==', 2)&&e.check('день недели', '<', 5)&&e.check('день недели', '!=', 0) ? e.calc('Относительный', 'неделя', -2).calc('Календарный', 'неделя', 'начало')
            : e.check('неделя', '!=', 1) ? e.calc('Календарный', 'неделя', 'начало')
                : e.calc('Относительный', 'неделя', -1).calc('Календарный', 'неделя', 'начало'),
            e => e.check('неделя', '==', 2)&&e.check('день недели', '<', 5)&&e.check('день недели', '!=', 0) ? e.calc('Относительный', 'неделя', -2).calc('Календарный', 'неделя', 'конец')
                : e.check('неделя', '!=', 1) ? e.calc('Календарный', 'неделя', 'конец')
                    : e.calc('Относительный', 'неделя', -1).calc('Календарный', 'неделя', 'конец') ],

    // хз как это работает, но если условие  истина, то надо все равно отнимать месяц
    'Последний полный месяц':
        [e => e.calc('Относительный', 'день', +1).check('день', '>', 1) ?
            e.calc('Относительный', 'месяц', -1).calc('Календарный', 'месяц', 'начало')  :
            e.calc('Относительный', 'месяц', -1).calc('Календарный', 'месяц', 'начало'),
            e => e.calc('Относительный', 'день', +1).check('день', '>', 1) ?
                e.calc('Относительный', 'месяц', -1).calc('Календарный', 'месяц', 'конец')  :
                e.calc('Относительный', 'месяц', -1).calc('Календарный', 'месяц', 'конец')],

    'Весь год для последнего полного месяца':
        [e => e.calc('Относительный', 'день', +1).check('день', '>', 1) ? e.calc('Относительный', 'месяц', -1).calc('Календарный', 'год', 'начало')
            : e.calc('Относительный', 'месяц', -1).calc('Календарный', 'год', 'начало'),
            e => e.calc('Относительный', 'день', +1).check('день', '>', 1) ? e.calc('Относительный', 'месяц', -1).calc('Календарный', 'год', 'конец')
                : e.calc('Относительный', 'месяц', -1).calc('Календарный', 'год', 'конец')],

    'Год до последнего полного месяца':
        [e => e.calc('Относительный', 'день', +1).check('день', '>', 1) ? e.calc('Относительный', 'месяц', -1).calc('Календарный', 'год', 'начало')
            : e.calc('Относительный', 'месяц', -1).calc('Календарный', 'год', 'начало'),
            e => e.calc('Относительный', 'день', +1).check('день', '>', 1) ?
                e.calc('Относительный', 'месяц', -1).calc('Календарный', 'месяц', 'конец')  :
                e.calc('Относительный', 'месяц', -1).calc('Календарный', 'месяц', 'конец')],

    //Блок 1. Выбор одной даты
    'Текущяя выбранная дата':
        [e => e,
            null],
    'Понедельник этой недели':
        [e => e.calc('Календарный', 'неделя', 'начало'),
            null],
    'Неделю назад':
        [e => e.calc('Относительный', 'неделя', -1),
            null],
    'Две недели назад':
        [e => e.calc('Относительный', 'неделя', -2),
            null],
    'Месяц назад':
        [e => e.calc('Относительный', 'день', -28),
            null],
    'Год назад':
        [e => e.calc('Относительный', 'день', -364),
            null],

    //**************************************************************************
    //Блок 2. Выбор периода от текущей

    'Период 7 дней':
        [e => e.calc('Относительный', 'день', -6),
            e => e],
    'Период 10 дней':
        [e => e.calc('Относительный', 'день', -9),
            e => e],
    'Период 14 дней':
        [e => e.calc('Относительный', 'день', -13),
            e => e],
    'Период 2 недели':
        [e => e.calc('Относительный', 'день', -7).calc('Календарный', 'неделя', 'начало'),
            e => e.calc('Календарный', 'неделя', 'конец')],
    'Период 8 недель':
        [e => e.calc('Относительный', 'неделя', -8).calc('Календарный', 'неделя', 'начало'),
            e => e.calc('Относительный', 'неделя', -1).calc('Календарный', 'неделя', 'конец')],
    'Период с начала месяца':
        [e => e.calc('Календарный', 'месяц', 'начало'),
            e => e],
    'Период с начала квартала':
        [e => e.calc('Календарный', 'квартал', 'начало'),
            e => e],
    'Период с начала года':
        [e => e.calc('Календарный', 'год', 'начало'),
            e => e],
    'Период с начала года до конца этой недели':
        [e => e.calc('Календарный', 'год', 'начало'),
            e => e.calc('Календарный', 'неделя', 'конец')],
    'Период с начала времени':
        [e => e.calc('Установить', 'год', 2023).calc('Установить', 'месяц', 5).calc('Установить', 'день', 3),
            e => e],
    'С начала недели':
        [e => e.calc('Календарный', 'неделя', 'начало'),
            e => e],
    'Период с начала прошлого года':
        [e => e.calc('Относительный', 'год', -1).calc('Календарный', 'год', 'начало'),
            e => e],

    //**************************************************************************
    //Блок 3. Выбор недели/месяца/года
    'Период 7 дней -7 дней':
        [e => e.calc('Относительный', 'день', -13),
            e => e.calc('Относительный', 'день', -7)],
    'Вся эта неделя':
        [e => e.calc('Календарный', 'неделя', 'начало'),
            e => e.calc('Календарный', 'неделя', 'конец')],
    'Вся прошлая неделя':
        [e => e.calc('Относительный', 'день', -7).calc('Календарный', 'неделя', 'начало'),
            e => e.calc('Относительный', 'день', -7).calc('Календарный', 'неделя', 'конец')],
    'Вся позапрошлая неделя':
        [e => e.calc('Относительный', 'день', -14).calc('Календарный', 'неделя', 'начало'),
            e => e.calc('Относительный', 'день', -14).calc('Календарный', 'неделя', 'конец')],
    'Весь текущий месяц':
        [e => e.calc('Календарный', 'месяц', 'начало'),
            e => e.calc('Календарный', 'месяц', 'конец')],
    'Весь прошлый месяц':
        [e => e.calc('Относительный', 'месяц', -1).calc('Календарный', 'месяц', 'начало'),
            e => e.calc('Относительный', 'месяц', -1).calc('Календарный', 'месяц', 'конец')],
    'Весь позапрошлый месяц':
        [e => e.calc('Относительный', 'месяц', -2).calc('Календарный', 'месяц', 'начало'),
            e => e.calc('Относительный', 'месяц', -2).calc('Календарный', 'месяц', 'конец')],
    'Весь прошлый и позапрошлый месяц':
        [e => e.calc('Относительный', 'месяц', -2).calc('Календарный', 'месяц', 'начало'),
            e => e.calc('Относительный', 'месяц', -1).calc('Календарный', 'месяц', 'конец')],
    'Прошлые 3 месяца':
        [e => e.calc('Относительный', 'месяц', -2).calc('Календарный', 'месяц', 'начало'),
            e => e.calc('Календарный', 'месяц', 'конец')],
    'Весь прошлый год':
        [e => e.calc('Относительный', 'год', -1).calc('Календарный', 'год', 'начало'),
            e => e.calc('Относительный', 'год', -1).calc('Календарный', 'год', 'конец')],
    'Весь текущий год':
        [e => e.calc('Календарный', 'год', 'начало'),
            e => e.calc('Календарный', 'год', 'конец')],
    'Прошлые 12 месяцев':
        [e => e.calc('Относительный', 'месяц', -11).calc('Календарный', 'месяц', 'начало'),
            e => e.calc('Календарный', 'месяц', 'конец')],
    'Весь позапрошлый год':
        [e => e.calc('Относительный', 'год', -2).calc('Календарный', 'год', 'начало'),
            e => e.calc('Относительный', 'год', -2).calc('Календарный', 'год', 'конец')],
    'Прошлые 12 месяцев до текущей':
        [e => e.calc('Относительный', 'месяц', -11).calc('Календарный', 'месяц', 'начало'),
            e => e],

    //**************************************************************************
    //Блок 4. Выбор периода АППГ
    'Вся эта неделя АППГ':
        [e => e.calc('Календарный', 'неделя', 'начало').calc('Относительный', 'день', -370),
            e => e.calc('Календарный', 'неделя', 'конец').calc('Относительный', 'день', -364)],
    'Период 7 дней АППГ':
        [e => e.calc('Относительный', 'день', -370),
            e => e.calc('Относительный', 'день', -364)],
    'Период 10 дней АППГ':
        [e => e.calc('Относительный', 'день', -373),
            e => e.calc('Относительный', 'день', -364)],
    'Период 14 дней АППГ':
        [e => e.calc('Относительный', 'день', -377),
            e => e.calc('Относительный', 'день', -364)],
    'Период 8 недель АППГ':
        [e => e.calc('Относительный', 'день', -364).calc('Относительный', 'неделя', -8).calc('Календарный', 'неделя', 'начало'),
            e => e.calc('Относительный', 'день', -364).calc('Относительный', 'неделя', -1).calc('Календарный', 'неделя', 'конец')],
    'Период с начала месяца АППГ':
        [e => e.calc('Относительный', 'год', -1).calc('Календарный', 'месяц', 'начало'),
            e => e.calc('Относительный', 'год', -1)],
    'Период с начала квартала АППГ':
        [e => e.calc('Относительный', 'год', -1).calc('Календарный', 'квартал', 'начало'),
            e => e.calc('Относительный', 'год', -1)],
    'Период с начала года АППГ':
        [e => e.calc('Относительный', 'год', -1).calc('Календарный', 'год', 'начало'),
            e => e.calc('Относительный', 'год', -1)],
    'Период с начала года до конца этой недели АППГ':
        [e => e.calc('Календарный', 'год', 'начало').calc('Относительный', 'год', -1),
            e => e.calc('Календарный', 'неделя', 'конец').calc('Относительный', 'год', -1)],
    'Весь текущий месяц АППГ':
        [e => e.calc('Относительный', 'год', -1).calc('Календарный', 'месяц', 'начало'),
            e => e.calc('Относительный', 'год', -1).calc('Календарный', 'месяц', 'конец')],
    'Весь прошлый месяц АППГ':
        [e => e.calc('Относительный', 'год', -1).calc('Относительный', 'месяц', -1).calc('Календарный', 'месяц', 'начало'),
            e => e.calc('Относительный', 'год', -1).calc('Относительный', 'месяц', -1).calc('Календарный', 'месяц', 'конец')],
    'Весь позапрошлый месяц АППГ':
        [e => e.calc('Относительный', 'год', -1).calc('Относительный', 'месяц', -2).calc('Календарный', 'месяц', 'начало'),
            e => e.calc('Относительный', 'год', -1).calc('Относительный', 'месяц', -2).calc('Календарный', 'месяц', 'конец')],
    'Весь прошлый и позапрошлый месяц АППГ':
        [e => e.calc('Относительный', 'год', -1).calc('Относительный', 'месяц', -2).calc('Календарный', 'месяц', 'начало'),
            e => e.calc('Относительный', 'год', -1).calc('Относительный', 'месяц', -1).calc('Календарный', 'месяц', 'конец')],
    'Прошлые 3 месяца АППГ':
        [e => e.calc('Относительный', 'год', -1).calc('Относительный', 'месяц', -2).calc('Календарный', 'месяц', 'начало'),
            e => e.calc('Относительный', 'год', -1).calc('Календарный', 'месяц', 'конец')],
    'Весь год АППГ':
        [e => e.calc('Относительный', 'год', -1).calc('Календарный', 'год', 'начало'),
            e => e.calc('Относительный', 'год', -1).calc('Календарный', 'год', 'конец')],
    'Прошлые 12 месяцев АППГ':
        [e => e.calc('Относительный', 'год', -1).calc('Относительный', 'месяц', -11).calc('Календарный', 'месяц', 'начало'),
            e => e.calc('Относительный', 'год', -1).calc('Календарный', 'месяц', 'конец')],


    //**************************************************************************
    //Блок 5. Разное
    'Период прошлая неделя (среда)':
        [e => e.check('день недели', '>=', 3) ?
            e.calc('Относительный', 'неделя', -1).calc('Календарный', 'неделя', 'начало')  :
            e.calc('Относительный', 'неделя', -2).calc('Календарный', 'неделя', 'начало'),
            e => e.check('день недели', '>=', 3) ?
                e.calc('Относительный', 'неделя', -1).calc('Календарный', 'неделя', 'конец')  :
                e.calc('Относительный', 'неделя', -2).calc('Календарный', 'неделя', 'конец')],

    'Период позапрошлая неделя (среда)':
        [e => e.check('день недели', '>=', 3) ?
            e.calc('Относительный', 'неделя', -2).calc('Календарный', 'неделя', 'начало')  :
            e.calc('Относительный', 'неделя', -3).calc('Календарный', 'неделя', 'начало'),
            e => e.check('день недели', '>=', 3) ?
                e.calc('Относительный', 'неделя', -2).calc('Календарный', 'неделя', 'конец')  :
                e.calc('Относительный', 'неделя', -3).calc('Календарный', 'неделя', 'конец')],

    'Период прошлая и позапрошлая неделя (среда)':
        [e => e.check('день недели', '>=', 3) ?
            e.calc('Относительный', 'неделя', -3).calc('Календарный', 'неделя', 'начало')  :
            e.calc('Относительный', 'неделя', -4).calc('Календарный', 'неделя', 'начало'),
            e => e.check('день недели', '>=', 3) ?
                e.calc('Относительный', 'неделя', -1).calc('Календарный', 'неделя', 'конец')  :
                e.calc('Относительный', 'неделя', -2).calc('Календарный', 'неделя', 'конец')],

    'Вся эта неделя -2года':
        [e => e.calc('Календарный', 'неделя', 'начало').calc('Относительный', 'день', -2*364),
            e => e.calc('Календарный', 'неделя', 'конец').calc('Относительный', 'день', -2*364)],

    'Период с начала года после 29 февраля':
        [e => e.check('месяц', '<', 2) ?
            e.calc('Относительный', 'год', -1).calc('Календарный', 'год', 'начало')  :
            e.calc('Календарный', 'год', 'начало'),
            e => e.check('месяц', '<', 2) ?
                e.calc('Относительный', 'год', -1).calc('Календарный', 'год', 'конец')  :
                e.calc('Календарный', 'месяц', 'конец')],

    'Период с начала года после 29 февраля АППГ':
        [e => e.check('месяц', '<', 2) ?
            e.calc('Относительный', 'год', -2).calc('Календарный', 'год', 'начало')  :
            e.calc('Относительный', 'год', -1).calc('Календарный', 'год', 'начало'),
            e => e.check('месяц', '<', 2) ?
                e.calc('Относительный', 'год', -2).calc('Календарный', 'год', 'конец')  :
                e.calc('Относительный', 'год', -1).calc('Календарный', 'месяц', 'конец')],

    'Весь текущий месяц -2 года':
        [e => e.calc('Относительный', 'год', -2).calc('Календарный', 'месяц', 'начало'),
            e => e.calc('Относительный', 'год', -2).calc('Календарный', 'месяц', 'конец')],

    'Период с начала года -2 года':
        [e => e.calc('Относительный', 'год', -2).calc('Календарный', 'год', 'начало'),
            e => e.calc('Относительный', 'год', -2)],

    'Период с начала года до конца этой недели -2 года':
        [e => e.calc('Календарный', 'год', 'начало').calc('Относительный', 'год', -2),
            e => e.calc('Календарный', 'неделя', 'конец').calc('Относительный', 'год', -2)],

};

// #переменные
const startDate = [addIntervalToDate(new Date(),"день", -1)]//[addIntervalToDate(new Date(),"день", -1)]
const maxDate = addIntervalToDate(new Date(),"день", -1)
const key =  'S_MM_'
const saveBord = false

//Позваляет выбирать последний день доступный для выбора
$('.datepicker-here').datepicker({
    maxDate: maxDate
});


let firstDateWidget // Прослушевоемый фильтр (ПФ)
let date = getDatesFromLocalStorageOrWindow(saveBord,key)
let spravochnikId = saveWidgetsToStorage(spravochnik)


// #классы
class DateCalculator {
    constructor(date = new Date()) {
        this.date = date;
        this.if = true
    }


    check(...args) {

        if (args.length > 0)  {
            const func = funcs['Условие']

            this.if = func(this.date, ...args);
        }
        return this.if;
    }

    calc(action, ...args) {
        const func = funcs[action];
        if (!func) {
            throw new Error('Invalid action specified');
        }
        this.date = func(this.date, ...args);
        return this;
    }

    getDate() {
        return this.date;
    }
}

// #функции

// Функция поиску по имени необходимых фильтров
function saveWidgetsToStorage(spravochnik) {
    let allWidgets = visApi().getWidgets();
    let spravochnikId = {}
    allWidgets.forEach( widget => {


        let text = widget.widgetState.title.text;
        let key = text.replace(/^\s+|\s+$/g, '')
        let id = widget.widgetState.guid

        if (spravochnik[key]) {

            if (spravochnik[key] == 1)
                firstDateWidget = id
            else spravochnikId[key] = id

        }
    });

    return spravochnikId
};

// Функция для сохранения массива дат в sessionStorage
function saveDatesToLocalStorageOrWindow(flag,key, datesArray) {
    if (flag){
        sessionStorage.setItem(key, JSON.stringify(datesArray))
    } else {
        window[key] = datesArray
    }

}


// Функция для чтения массива дат из sessionStorage
function getDatesFromLocalStorageOrWindow(flag,key) {
    if (flag){
        const storedDates = sessionStorage.getItem(key);
        return storedDates ? JSON.parse(storedDates).map(e => new Date(e)) : [];
    } else {
        if (!window[key])
            window[key] = [] ;

        return window[key].map(e => new Date(e));

    }


}


// Функция выполнения расчетов
function render(date) {
    const log = ['<br><br>']
    let i = 1
    for (var key in spravochnikId) {
        const arrF = spravochnik[key]
        const name = key
        visApi().onWidgetLoadedListener({ guid: `-данные для-${key}`,widgetGuid: spravochnikId[key] },  (w) => {

            let ret = []

            date.forEach((e,i) =>{
                if  (arrF[i] === null) return

                const calculator = new DateCalculator(e)
                ret.push( arrF[i](calculator).getDate())
            })
            log.push(`<div style="color: #a0a0c0">${i} ${key}</div> ${ret.map(e => e.toLocaleDateString('ru-RU')).join(' - ')} `)

            visApi().setDateFilterSelectedValues(w.widgetGuid, ret)
        })
        i+=1


    }

    // отрисовываем, что бы увидеть, что все отработало корректно
    w.general.text = date.map(e => e.toLocaleDateString('ru-RU')).join(' - ') + log.join(' ')
    TextRender({
        text: w.general,
        style: w.style
    });

}

// #функции по работе с датой

// Функция для прибавления интервала к дате
function addIntervalToDate(date, periodType, value) {
    // Создание объекта Moment с переданной датой
    const mDate = moment(date);

    // Прибавление времени к дате в зависимости от типа периода
    switch (periodType) {
        case 'год':
            mDate.add(value, 'years');
            break;
        case 'квартал':
            mDate.add(value, 'quarters');
            break;
        case 'месяц':
            mDate.add(value, 'months');
            break;
        case 'неделя':
            mDate.add(value, 'weeks');
            break;
        case 'день':
            mDate.add(value, 'days');
            break;
        default:
            throw new Error('период долден быть из списка: год, квартал, месяц, неделя, день');
    }

    // Преобразование обновленной даты в формат JavaScript Date и возврат
    return mDate.toDate();
}

// Функция для определения начала или конца периода для заданной даты
function getStartEndPeriodDate(_date = new Date(), period = 'год', type = 'конец') {
    const resultDate = new Date(_date);
    const date = new Date(_date)
    switch (period) {
        case 'год':
            if (type === 'начало') {
                resultDate.setMonth(0);
                resultDate.setDate(1);
            } else {
                resultDate.setMonth(11);
                resultDate.setDate(31);
            }
            break;
        case 'квартал':
            const quarter = Math.floor(date.getMonth() / 3) + 1;
            if (type === 'начало') {
                resultDate.setMonth((quarter - 1) * 3);
                resultDate.setDate(1);
            } else {
                resultDate.setMonth(quarter * 3);
                resultDate.setDate(0);
            }
            break;
        case 'месяц':
            if (type === 'начало') {
                resultDate.setDate(1);
            } else {

                resultDate.setMonth(resultDate.getMonth() + 1, 0);
            }
            break;
        case 'неделя':
            const dayOfWeek = date.getDay();
            // что бы узнать когда неделя началась, необходимо из текщего дня вычесть номер дня недели и прибавить 1
            // тк вс == 0, то отнять надо 6
            const diff = date.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1);
            const firstDayOfWeek = new Date(date.setDate(diff));
            const lastDayOfWeek = new Date(firstDayOfWeek);
            lastDayOfWeek.setDate(firstDayOfWeek.getDate() + 6);
            if (type === 'начало') {
                return firstDayOfWeek;
            } else {
                return lastDayOfWeek;
            }
            break;
        default:
            throw new Error('период долден быть из списка: год, квартал, месяц, неделя');
    }
    return resultDate;
}

// Функция для установки значения в дате
function setDatePeriod(date = new Date(), period = "день недели", value = 1) {
    const mDate = moment(date);

    switch (period) {
        case 'год':
            mDate.year(value);
            break;
        case 'квартал':
            mDate.quarter(value);
            break;
        case 'месяц':
            mDate.month(value-1);
            break;
        case 'неделя':
            mDate.week(value).isoWeekday(1);
            break;
        case 'день недели':
            mDate.isoWeekday(value);
            break;
        case 'день':
            mDate.date(value);
            break;
        default:
            throw new Error('период долден быть из списка: год, квартал, месяц, неделя, день недели, день');
    }

    return mDate.toDate();
}

// Функция для проверки условия
function isDateComponentEqual(date, period, operator, value) {
    switch (period) {
        case 'год':
            return compareValues(date.getFullYear(), operator, value);
        case 'квартал':
            return compareValues(Math.floor((date.getMonth() + 3) / 3), operator, value);
        case 'месяц':
            return compareValues(date.getMonth() + 1, operator, value);
        case 'неделя':
            return compareValues(getWeekNumber(date), operator, value);
        case 'день недели':
            return compareValues(date.getDay(), operator, value);
        case 'день':
            return compareValues(date.getDate(), operator, value);
        default:
            throw new Error('период долден быть из списка: год, квартал, месяц, неделя, день недели, день');
    }
}

// Функция для получения номера недели в году
function getWeekNumber(date) {

    // Определяем первый день недели для нашего календаря (Воскресенье - 0, Понедельник - 1, и так далее)
    const firstDayOfWeek = 1;

    // Определяем первую неделю года
    let firstWeekOfYear = new Date(date.getFullYear(), 0, 1);
    while (firstWeekOfYear.getDay() !== firstDayOfWeek) {
        firstWeekOfYear.setDate(firstWeekOfYear.getDate() - 1);
    }

    // Рассчитываем количество дней между текущей датой и первым днем первой недели года, день = 1000 * 60 * 60 * 24 секунд
    const daysDiff = Math.floor((date - firstWeekOfYear) / 86400000);

    // Определяем номер текущей недели
    const weekNumber = Math.floor(daysDiff / 7) + 1;

    return weekNumber;

}

// Функция для сравнения значений с помощью операторов
function compareValues(a, operator, b) {
    switch (operator) {
        case '<': return a < b;
        case '<=': return a <= b;
        case '>': return a > b;
        case '>=': return a >= b;
        case '==': return a === b;
        case '!=': return a !== b;
        default: throw new Error('оператор должен быть из спика: <, >, <=, >=, ==, !==');
    }
}

// #код
visApi().onWidgetLoadedListener({ guid: `${w.general.renderTo}-загрузка-${firstDateWidget}`,widgetGuid: firstDateWidget }, _ => {

    //если LocalStorage пуст - запрашиваем дату из ПФ
    if (date.length == 0) {
        if (startDate.length === 0) {

            date = (visApi().getSelectedValues(firstDateWidget)[0] || [])
                .map(e => new Date(e))


        } else date = startDate
        if (date.length == 1)
            date = date.concat(date)
        saveDatesToLocalStorageOrWindow(saveBord,key,date)
    }

    visApi().setDateFilterSelectedValues(firstDateWidget, date)
    render(date)


    // подписываемся на обновления
    visApi().onSelectedValuesChangedListener({ guid: w.general.renderTo+'-синхронизатор', widgetGuid: firstDateWidget }, (values) => {
        date = values.selectedValues[0]
        saveDatesToLocalStorageOrWindow(saveBord,key,date)
        render(date)
    })

})

